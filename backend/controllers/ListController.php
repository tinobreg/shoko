<?php
// This class was automatically generated by a giiant build task
// You should not change it manually as it will be overwritten on next build

namespace backend\controllers;

use common\models\Date;
use common\models\ListFriday;
use common\models\User;
use yii\data\ActiveDataProvider;
use yii\web\Controller;
use yii\web\HttpException;
use yii\helpers\Url;
use yii\filters\AccessControl;
use Yii;
use dmstr\bootstrap\Tabs;

/**
 * ListController implements the CRUD actions for ListFriday model.
 */
class ListController extends Controller
{
    /**
     * @var boolean whether to enable CSRF validation for the actions in this controller.
     * CSRF validation is enabled only when both this property and [[Request::enableCsrfValidation]] are true.
     */
    public $enableCsrfValidation = false;


    /**
     * Lists all ListFriday models.
     * @return mixed
     */
    public function actionIndex($idDate = null, $idUser = null, $export = false)
    {
        if(!Yii::$app->user->can('shokoManager') && (!empty($idUser) && Yii::$app->user->id != $idUser)){
            return $this->redirect(['index']);
        }

        if(empty($idDate)){
            $date = Date::findOne(['status'=>Date::STATUS_ACTIVE]);
        }else{
            $date = Date::findOne($idDate);
        }
        $dataProvider = new ActiveDataProvider([
            'query' => ListFriday::find()->where(['idUser'=>(!empty($idUser)?$idUser:Yii::$app->user->id), 'idDate'=>$date->primaryKey])->orderBy('name ASC, lastName ASC'),
        ]);

        Tabs::clearLocalStorage();

        Url::remember();
        \Yii::$app->session['__crudReturnUrl'] = null;

        if($export == true){
            $lists = ListFriday::find()->where(['idUser'=>(!empty($idUser)?$idUser:Yii::$app->user->id), 'idDate'=>$date->primaryKey])->orderBy('name ASC, lastName ASC')->all();
            $this->exportList($lists, (!empty($idUser)?$idUser:Yii::$app->user->id), $date->primaryKey);
        }

        return $this->render('index', [
            'dataProvider' => $dataProvider,
            'date'=>$date,
            'url'=> Url::to(['list/index', 'idDate'=>$date->primaryKey, 'idUser'=>(!empty($idUser)?$idUser:Yii::$app->user->id), 'export'=>true])
        ]);
    }


    public function exportList($list, $idUser, $idDate)
    {
        $user = User::findById($idUser);
        $date = Date::findOne($idDate);

        $phpExcel = new \PHPExcel();

        $worksheet = $phpExcel->getActiveSheet();
        $rowIterator = $worksheet->getRowIterator();

        $this->writeRow(
            $rowIterator,
            ['Lista de '.$user->userData0->listName, Yii::$app->formatter->asDate($date->date, 'yyyy-MM-dd')]
        );

        //Write header
        $this->writeRow($rowIterator, ['Nombre', 'Apellido']);

        foreach ($list as $guest) {
            $data = [
                $guest->name,
                $guest->lastName,
            ];
            $this->writeRow($rowIterator, $data);
        }

        $objWriter = \PHPExcel_IOFactory::createWriter($phpExcel, 'Excel2007');
        $filename = Yii::$app->formatter->asDate($date->date, 'yyyy-MM-dd') . '-'.seoParam($user->userData0->listName).'.xlsx';

        $file = '/tmp/' . uniqid();
        $objWriter->save($file);

        Yii::$app->response->sendFile($file, $filename)->send();
        @unlink($file);

        return false;
    }

    /**
     * Writes the row of data from the given row iterator and the data to write in the cell
     * @param \PHPExcel_Worksheet_RowIterator $rowIterator
     * @param array $data the data that belongs to each cell of the row pointed by the row iterator
     */
    protected function writeRow(\PHPExcel_Worksheet_RowIterator $rowIterator, $data)
    {
        $row = $rowIterator->current();
        $cellIterator = $row->getCellIterator();
        $cellIterator->setIterateOnlyExistingCells(false);

        foreach ($data as $cellValue) {
            $cell = $cellIterator->current();
            $cell->setValue($cellValue);
            $cellIterator->next();
        }
        $rowIterator->next();
    }

    /**
     * Updates an existing ListFriday model.
     * If update is successful, the browser will be redirected to the 'view' page.
     * @param integer $idListFriday
     * @return mixed
     */
    public function actionUpdate($idListFriday)
    {
        $model = $this->findModel($idListFriday);
        $model->birthday = date('m/d/Y', $model->birthday);

        if ($model->load($_POST)){
            $model->birthday = strtotime($model->birthday);
            if($model->save()){
                return $this->redirect(['list/index']);
            }

        }
        return $this->render('update', [
            'model' => $model,
        ]);
    }

    /**
     * Deletes an existing ListFriday model.
     * If deletion is successful, the browser will be redirected to the 'index' page.
     * @param integer $idListFriday
     * @return mixed
     */
    public function actionDelete($idListFriday)
    {
        try {
            $this->findModel($idListFriday)->delete();
        } catch (\Exception $e) {
            $msg = (isset($e->errorInfo[2]))?$e->errorInfo[2]:$e->getMessage();
            \Yii::$app->getSession()->addFlash('error', $msg);
            return $this->redirect(Url::previous());
        }

// TODO: improve detection
        $isPivot = strstr('$idListFriday',',');
        if ($isPivot == true) {
            return $this->redirect(Url::previous());
        } elseif (isset(\Yii::$app->session['__crudReturnUrl']) && \Yii::$app->session['__crudReturnUrl'] != '/') {
            Url::remember(null);
            $url = \Yii::$app->session['__crudReturnUrl'];
            \Yii::$app->session['__crudReturnUrl'] = null;

            return $this->redirect($url);
        } else {
            return $this->redirect(['index']);
        }
    }

    /**
     * Finds the ListFriday model based on its primary key value.
     * If the model is not found, a 404 HTTP exception will be thrown.
     * @param integer $idListFriday
     * @return ListFriday the loaded model
     * @throws HttpException if the model cannot be found
     */
    protected function findModel($idListFriday)
    {
        if (($model = ListFriday::findOne($idListFriday)) !== null) {
            return $model;
        } else {
            throw new HttpException(404, 'The requested page does not exist.');
        }
    }
}
